// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/Linkinlog/quotes/db"
	"github.com/Linkinlog/quotes/models"
	"github.com/google/uuid"
)

type FakeQuoteStore struct {
	AllStub        func() ([]*models.Quote, error)
	allMutex       sync.RWMutex
	allArgsForCall []struct {
	}
	allReturns struct {
		result1 []*models.Quote
		result2 error
	}
	allReturnsOnCall map[int]struct {
		result1 []*models.Quote
		result2 error
	}
	DeleteStub        func(uuid.UUID) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 uuid.UUID
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	InsertStub        func(*models.Quote) error
	insertMutex       sync.RWMutex
	insertArgsForCall []struct {
		arg1 *models.Quote
	}
	insertReturns struct {
		result1 error
	}
	insertReturnsOnCall map[int]struct {
		result1 error
	}
	QueryByIdStub        func(uuid.UUID) (*models.Quote, error)
	queryByIdMutex       sync.RWMutex
	queryByIdArgsForCall []struct {
		arg1 uuid.UUID
	}
	queryByIdReturns struct {
		result1 *models.Quote
		result2 error
	}
	queryByIdReturnsOnCall map[int]struct {
		result1 *models.Quote
		result2 error
	}
	UpdateStub        func(*models.Quote) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 *models.Quote
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeQuoteStore) All() ([]*models.Quote, error) {
	fake.allMutex.Lock()
	ret, specificReturn := fake.allReturnsOnCall[len(fake.allArgsForCall)]
	fake.allArgsForCall = append(fake.allArgsForCall, struct {
	}{})
	stub := fake.AllStub
	fakeReturns := fake.allReturns
	fake.recordInvocation("All", []interface{}{})
	fake.allMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQuoteStore) AllCallCount() int {
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	return len(fake.allArgsForCall)
}

func (fake *FakeQuoteStore) AllCalls(stub func() ([]*models.Quote, error)) {
	fake.allMutex.Lock()
	defer fake.allMutex.Unlock()
	fake.AllStub = stub
}

func (fake *FakeQuoteStore) AllReturns(result1 []*models.Quote, result2 error) {
	fake.allMutex.Lock()
	defer fake.allMutex.Unlock()
	fake.AllStub = nil
	fake.allReturns = struct {
		result1 []*models.Quote
		result2 error
	}{result1, result2}
}

func (fake *FakeQuoteStore) AllReturnsOnCall(i int, result1 []*models.Quote, result2 error) {
	fake.allMutex.Lock()
	defer fake.allMutex.Unlock()
	fake.AllStub = nil
	if fake.allReturnsOnCall == nil {
		fake.allReturnsOnCall = make(map[int]struct {
			result1 []*models.Quote
			result2 error
		})
	}
	fake.allReturnsOnCall[i] = struct {
		result1 []*models.Quote
		result2 error
	}{result1, result2}
}

func (fake *FakeQuoteStore) Delete(arg1 uuid.UUID) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 uuid.UUID
	}{arg1})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeQuoteStore) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeQuoteStore) DeleteCalls(stub func(uuid.UUID) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeQuoteStore) DeleteArgsForCall(i int) uuid.UUID {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeQuoteStore) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeQuoteStore) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeQuoteStore) Insert(arg1 *models.Quote) error {
	fake.insertMutex.Lock()
	ret, specificReturn := fake.insertReturnsOnCall[len(fake.insertArgsForCall)]
	fake.insertArgsForCall = append(fake.insertArgsForCall, struct {
		arg1 *models.Quote
	}{arg1})
	stub := fake.InsertStub
	fakeReturns := fake.insertReturns
	fake.recordInvocation("Insert", []interface{}{arg1})
	fake.insertMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeQuoteStore) InsertCallCount() int {
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	return len(fake.insertArgsForCall)
}

func (fake *FakeQuoteStore) InsertCalls(stub func(*models.Quote) error) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = stub
}

func (fake *FakeQuoteStore) InsertArgsForCall(i int) *models.Quote {
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	argsForCall := fake.insertArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeQuoteStore) InsertReturns(result1 error) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = nil
	fake.insertReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeQuoteStore) InsertReturnsOnCall(i int, result1 error) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = nil
	if fake.insertReturnsOnCall == nil {
		fake.insertReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.insertReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeQuoteStore) QueryById(arg1 uuid.UUID) (*models.Quote, error) {
	fake.queryByIdMutex.Lock()
	ret, specificReturn := fake.queryByIdReturnsOnCall[len(fake.queryByIdArgsForCall)]
	fake.queryByIdArgsForCall = append(fake.queryByIdArgsForCall, struct {
		arg1 uuid.UUID
	}{arg1})
	stub := fake.QueryByIdStub
	fakeReturns := fake.queryByIdReturns
	fake.recordInvocation("QueryById", []interface{}{arg1})
	fake.queryByIdMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQuoteStore) QueryByIdCallCount() int {
	fake.queryByIdMutex.RLock()
	defer fake.queryByIdMutex.RUnlock()
	return len(fake.queryByIdArgsForCall)
}

func (fake *FakeQuoteStore) QueryByIdCalls(stub func(uuid.UUID) (*models.Quote, error)) {
	fake.queryByIdMutex.Lock()
	defer fake.queryByIdMutex.Unlock()
	fake.QueryByIdStub = stub
}

func (fake *FakeQuoteStore) QueryByIdArgsForCall(i int) uuid.UUID {
	fake.queryByIdMutex.RLock()
	defer fake.queryByIdMutex.RUnlock()
	argsForCall := fake.queryByIdArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeQuoteStore) QueryByIdReturns(result1 *models.Quote, result2 error) {
	fake.queryByIdMutex.Lock()
	defer fake.queryByIdMutex.Unlock()
	fake.QueryByIdStub = nil
	fake.queryByIdReturns = struct {
		result1 *models.Quote
		result2 error
	}{result1, result2}
}

func (fake *FakeQuoteStore) QueryByIdReturnsOnCall(i int, result1 *models.Quote, result2 error) {
	fake.queryByIdMutex.Lock()
	defer fake.queryByIdMutex.Unlock()
	fake.QueryByIdStub = nil
	if fake.queryByIdReturnsOnCall == nil {
		fake.queryByIdReturnsOnCall = make(map[int]struct {
			result1 *models.Quote
			result2 error
		})
	}
	fake.queryByIdReturnsOnCall[i] = struct {
		result1 *models.Quote
		result2 error
	}{result1, result2}
}

func (fake *FakeQuoteStore) Update(arg1 *models.Quote) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 *models.Quote
	}{arg1})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeQuoteStore) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeQuoteStore) UpdateCalls(stub func(*models.Quote) error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeQuoteStore) UpdateArgsForCall(i int) *models.Quote {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeQuoteStore) UpdateReturns(result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeQuoteStore) UpdateReturnsOnCall(i int, result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeQuoteStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	fake.queryByIdMutex.RLock()
	defer fake.queryByIdMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeQuoteStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.QuoteStore = new(FakeQuoteStore)
